// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package account

import (
	"bytes"
	"fmt"
	"github.com/ShareSound/RPC-Server/rpc/shared"
	"github.com/mshockwave/thrift-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__

type AccountService interface {
	// Parameters:
	//  - Email
	//  - Username
	//  - Password
	RegisterAccount(email string, username string, password string) (r *shared.Session, err error)
	// Parameters:
	//  - Email
	//  - Password
	Login(email string, password string) (r *shared.Session, err error)
	// Parameters:
	//  - Ctx
	Logout(ctx *shared.Session) (err error)
	// Parameters:
	//  - Ctx
	GetProfile(ctx *shared.Session) (r *ProfileResult_, err error)
}

type AccountServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewAccountServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AccountServiceClient {
	return &AccountServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewAccountServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AccountServiceClient {
	return &AccountServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Email
//  - Username
//  - Password
func (p *AccountServiceClient) RegisterAccount(email string, username string, password string) (r *shared.Session, err error) {
	if err = p.sendRegisterAccount(email, username, password); err != nil {
		return
	}
	return p.recvRegisterAccount()
}

func (p *AccountServiceClient) sendRegisterAccount(email string, username string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccountServiceRegisterAccountArgs{
		Email:    email,
		Username: username,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccountServiceClient) recvRegisterAccount() (value *shared.Session, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "registerAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerAccount failed: invalid message type")
		return
	}
	result := AccountServiceRegisterAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Email
//  - Password
func (p *AccountServiceClient) Login(email string, password string) (r *shared.Session, err error) {
	if err = p.sendLogin(email, password); err != nil {
		return
	}
	return p.recvLogin()
}

func (p *AccountServiceClient) sendLogin(email string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("login", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccountServiceLoginArgs{
		Email:    email,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccountServiceClient) recvLogin() (value *shared.Session, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "login" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "login failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "login failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "login failed: invalid message type")
		return
	}
	result := AccountServiceLoginResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.AuthE != nil {
		err = result.AuthE
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ctx
func (p *AccountServiceClient) Logout(ctx *shared.Session) (err error) {
	if err = p.sendLogout(ctx); err != nil {
		return
	}
	return p.recvLogout()
}

func (p *AccountServiceClient) sendLogout(ctx *shared.Session) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("logout", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccountServiceLogoutArgs{
		Ctx: ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccountServiceClient) recvLogout() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "logout" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "logout failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "logout failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "logout failed: invalid message type")
		return
	}
	result := AccountServiceLogoutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.AuthE != nil {
		err = result.AuthE
		return
	}
	return
}

// Parameters:
//  - Ctx
func (p *AccountServiceClient) GetProfile(ctx *shared.Session) (r *ProfileResult_, err error) {
	if err = p.sendGetProfile(ctx); err != nil {
		return
	}
	return p.recvGetProfile()
}

func (p *AccountServiceClient) sendGetProfile(ctx *shared.Session) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccountServiceGetProfileArgs{
		Ctx: ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccountServiceClient) recvGetProfile() (value *ProfileResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getProfile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getProfile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProfile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getProfile failed: invalid message type")
		return
	}
	result := AccountServiceGetProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.AuthE != nil {
		err = result.AuthE
		return
	}
	value = result.GetSuccess()
	return
}

type AccountServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AccountService
}

func (p *AccountServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AccountServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AccountServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAccountServiceProcessor(handler AccountService) *AccountServiceProcessor {

	self8 := &AccountServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["registerAccount"] = &accountServiceProcessorRegisterAccount{handler: handler}
	self8.processorMap["login"] = &accountServiceProcessorLogin{handler: handler}
	self8.processorMap["logout"] = &accountServiceProcessorLogout{handler: handler}
	self8.processorMap["getProfile"] = &accountServiceProcessorGetProfile{handler: handler}
	return self8
}

func (p *AccountServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x9

}

type accountServiceProcessorRegisterAccount struct {
	handler AccountService
}

func (p *accountServiceProcessorRegisterAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceRegisterAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccountServiceRegisterAccountResult{}
	var retval *shared.Session
	var err2 error
	if retval, err2 = p.handler.RegisterAccount(args.Email, args.Username, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerAccount: "+err2.Error())
		oprot.WriteMessageBegin("registerAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("registerAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorLogin struct {
	handler AccountService
}

func (p *accountServiceProcessorLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccountServiceLoginResult{}
	var retval *shared.Session
	var err2 error
	if retval, err2 = p.handler.Login(args.Email, args.Password); err2 != nil {
		switch v := err2.(type) {
		case *shared.AuthException:
			result.AuthE = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: "+err2.Error())
			oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("login", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorLogout struct {
	handler AccountService
}

func (p *accountServiceProcessorLogout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceLogoutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccountServiceLogoutResult{}
	var err2 error
	if err2 = p.handler.Logout(args.Ctx); err2 != nil {
		switch v := err2.(type) {
		case *shared.AuthException:
			result.AuthE = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logout: "+err2.Error())
			oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("logout", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorGetProfile struct {
	handler AccountService
}

func (p *accountServiceProcessorGetProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceGetProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccountServiceGetProfileResult{}
	var retval *ProfileResult_
	var err2 error
	if retval, err2 = p.handler.GetProfile(args.Ctx); err2 != nil {
		switch v := err2.(type) {
		case *shared.AuthException:
			result.AuthE = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: "+err2.Error())
			oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Email
//  - Username
//  - Password
type AccountServiceRegisterAccountArgs struct {
	Email    string `thrift:"email,1" json:"email"`
	Username string `thrift:"username,2" json:"username"`
	Password string `thrift:"password,3" json:"password"`
}

func NewAccountServiceRegisterAccountArgs() *AccountServiceRegisterAccountArgs {
	return &AccountServiceRegisterAccountArgs{}
}

func (p *AccountServiceRegisterAccountArgs) GetEmail() string {
	return p.Email
}

func (p *AccountServiceRegisterAccountArgs) GetUsername() string {
	return p.Username
}

func (p *AccountServiceRegisterAccountArgs) GetPassword() string {
	return p.Password
}
func (p *AccountServiceRegisterAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceRegisterAccountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *AccountServiceRegisterAccountArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *AccountServiceRegisterAccountArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccountServiceRegisterAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceRegisterAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err)
	}
	return err
}

func (p *AccountServiceRegisterAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err)
	}
	return err
}

func (p *AccountServiceRegisterAccountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *AccountServiceRegisterAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceRegisterAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AccountServiceRegisterAccountResult struct {
	Success *shared.Session `thrift:"success,0" json:"success,omitempty"`
}

func NewAccountServiceRegisterAccountResult() *AccountServiceRegisterAccountResult {
	return &AccountServiceRegisterAccountResult{}
}

var AccountServiceRegisterAccountResult_Success_DEFAULT *shared.Session

func (p *AccountServiceRegisterAccountResult) GetSuccess() *shared.Session {
	if !p.IsSetSuccess() {
		return AccountServiceRegisterAccountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceRegisterAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceRegisterAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceRegisterAccountResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.Session{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccountServiceRegisterAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceRegisterAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccountServiceRegisterAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceRegisterAccountResult(%+v)", *p)
}

// Attributes:
//  - Email
//  - Password
type AccountServiceLoginArgs struct {
	Email    string `thrift:"email,1" json:"email"`
	Password string `thrift:"password,2" json:"password"`
}

func NewAccountServiceLoginArgs() *AccountServiceLoginArgs {
	return &AccountServiceLoginArgs{}
}

func (p *AccountServiceLoginArgs) GetEmail() string {
	return p.Email
}

func (p *AccountServiceLoginArgs) GetPassword() string {
	return p.Password
}
func (p *AccountServiceLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceLoginArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *AccountServiceLoginArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccountServiceLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("login_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err)
	}
	return err
}

func (p *AccountServiceLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err)
	}
	return err
}

func (p *AccountServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthE
type AccountServiceLoginResult struct {
	Success *shared.Session       `thrift:"success,0" json:"success,omitempty"`
	AuthE   *shared.AuthException `thrift:"auth_e,1" json:"auth_e,omitempty"`
}

func NewAccountServiceLoginResult() *AccountServiceLoginResult {
	return &AccountServiceLoginResult{}
}

var AccountServiceLoginResult_Success_DEFAULT *shared.Session

func (p *AccountServiceLoginResult) GetSuccess() *shared.Session {
	if !p.IsSetSuccess() {
		return AccountServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}

var AccountServiceLoginResult_AuthE_DEFAULT *shared.AuthException

func (p *AccountServiceLoginResult) GetAuthE() *shared.AuthException {
	if !p.IsSetAuthE() {
		return AccountServiceLoginResult_AuthE_DEFAULT
	}
	return p.AuthE
}
func (p *AccountServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceLoginResult) IsSetAuthE() bool {
	return p.AuthE != nil
}

func (p *AccountServiceLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceLoginResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &shared.Session{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccountServiceLoginResult) readField1(iprot thrift.TProtocol) error {
	p.AuthE = &shared.AuthException{}
	if err := p.AuthE.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthE), err)
	}
	return nil
}

func (p *AccountServiceLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("login_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccountServiceLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthE() {
		if err := oprot.WriteFieldBegin("auth_e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth_e: ", p), err)
		}
		if err := p.AuthE.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthE), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth_e: ", p), err)
		}
	}
	return err
}

func (p *AccountServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceLoginResult(%+v)", *p)
}

// Attributes:
//  - Ctx
type AccountServiceLogoutArgs struct {
	Ctx *shared.Session `thrift:"ctx,1" json:"ctx"`
}

func NewAccountServiceLogoutArgs() *AccountServiceLogoutArgs {
	return &AccountServiceLogoutArgs{}
}

var AccountServiceLogoutArgs_Ctx_DEFAULT *shared.Session

func (p *AccountServiceLogoutArgs) GetCtx() *shared.Session {
	if !p.IsSetCtx() {
		return AccountServiceLogoutArgs_Ctx_DEFAULT
	}
	return p.Ctx
}
func (p *AccountServiceLogoutArgs) IsSetCtx() bool {
	return p.Ctx != nil
}

func (p *AccountServiceLogoutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceLogoutArgs) readField1(iprot thrift.TProtocol) error {
	p.Ctx = &shared.Session{}
	if err := p.Ctx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ctx), err)
	}
	return nil
}

func (p *AccountServiceLogoutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logout_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceLogoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ctx", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ctx: ", p), err)
	}
	if err := p.Ctx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ctx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ctx: ", p), err)
	}
	return err
}

func (p *AccountServiceLogoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceLogoutArgs(%+v)", *p)
}

// Attributes:
//  - AuthE
type AccountServiceLogoutResult struct {
	AuthE *shared.AuthException `thrift:"auth_e,1" json:"auth_e,omitempty"`
}

func NewAccountServiceLogoutResult() *AccountServiceLogoutResult {
	return &AccountServiceLogoutResult{}
}

var AccountServiceLogoutResult_AuthE_DEFAULT *shared.AuthException

func (p *AccountServiceLogoutResult) GetAuthE() *shared.AuthException {
	if !p.IsSetAuthE() {
		return AccountServiceLogoutResult_AuthE_DEFAULT
	}
	return p.AuthE
}
func (p *AccountServiceLogoutResult) IsSetAuthE() bool {
	return p.AuthE != nil
}

func (p *AccountServiceLogoutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceLogoutResult) readField1(iprot thrift.TProtocol) error {
	p.AuthE = &shared.AuthException{}
	if err := p.AuthE.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthE), err)
	}
	return nil
}

func (p *AccountServiceLogoutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logout_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceLogoutResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthE() {
		if err := oprot.WriteFieldBegin("auth_e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth_e: ", p), err)
		}
		if err := p.AuthE.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthE), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth_e: ", p), err)
		}
	}
	return err
}

func (p *AccountServiceLogoutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceLogoutResult(%+v)", *p)
}

// Attributes:
//  - Ctx
type AccountServiceGetProfileArgs struct {
	Ctx *shared.Session `thrift:"ctx,1" json:"ctx"`
}

func NewAccountServiceGetProfileArgs() *AccountServiceGetProfileArgs {
	return &AccountServiceGetProfileArgs{}
}

var AccountServiceGetProfileArgs_Ctx_DEFAULT *shared.Session

func (p *AccountServiceGetProfileArgs) GetCtx() *shared.Session {
	if !p.IsSetCtx() {
		return AccountServiceGetProfileArgs_Ctx_DEFAULT
	}
	return p.Ctx
}
func (p *AccountServiceGetProfileArgs) IsSetCtx() bool {
	return p.Ctx != nil
}

func (p *AccountServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceGetProfileArgs) readField1(iprot thrift.TProtocol) error {
	p.Ctx = &shared.Session{}
	if err := p.Ctx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ctx), err)
	}
	return nil
}

func (p *AccountServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceGetProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ctx", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ctx: ", p), err)
	}
	if err := p.Ctx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ctx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ctx: ", p), err)
	}
	return err
}

func (p *AccountServiceGetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AuthE
type AccountServiceGetProfileResult struct {
	Success *ProfileResult_       `thrift:"success,0" json:"success,omitempty"`
	AuthE   *shared.AuthException `thrift:"auth_e,1" json:"auth_e,omitempty"`
}

func NewAccountServiceGetProfileResult() *AccountServiceGetProfileResult {
	return &AccountServiceGetProfileResult{}
}

var AccountServiceGetProfileResult_Success_DEFAULT *ProfileResult_

func (p *AccountServiceGetProfileResult) GetSuccess() *ProfileResult_ {
	if !p.IsSetSuccess() {
		return AccountServiceGetProfileResult_Success_DEFAULT
	}
	return p.Success
}

var AccountServiceGetProfileResult_AuthE_DEFAULT *shared.AuthException

func (p *AccountServiceGetProfileResult) GetAuthE() *shared.AuthException {
	if !p.IsSetAuthE() {
		return AccountServiceGetProfileResult_AuthE_DEFAULT
	}
	return p.AuthE
}
func (p *AccountServiceGetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceGetProfileResult) IsSetAuthE() bool {
	return p.AuthE != nil
}

func (p *AccountServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountServiceGetProfileResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ProfileResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccountServiceGetProfileResult) readField1(iprot thrift.TProtocol) error {
	p.AuthE = &shared.AuthException{}
	if err := p.AuthE.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthE), err)
	}
	return nil
}

func (p *AccountServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccountServiceGetProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthE() {
		if err := oprot.WriteFieldBegin("auth_e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth_e: ", p), err)
		}
		if err := p.AuthE.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthE), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth_e: ", p), err)
		}
	}
	return err
}

func (p *AccountServiceGetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceGetProfileResult(%+v)", *p)
}
